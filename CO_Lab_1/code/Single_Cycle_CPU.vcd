$date
	Sat Jul 28 18:02:40 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var reg 1 ! CLK $end
$var reg 1 " RST $end
$var integer 32 # count [31:0] $end
$var integer 32 $ end_count [31:0] $end
$var integer 32 % handle [31:0] $end
$scope module cpu $end
$var wire 4 & ALUCtrl [3:0] $end
$var wire 1 ' ALUSrc $end
$var wire 32 ( ALUSrcMux [31:0] $end
$var wire 3 ) ALU_op [2:0] $end
$var wire 32 * ALU_result [31:0] $end
$var wire 1 + RegDst $end
$var wire 1 , RegWrite $end
$var wire 1 - clk_i $end
$var wire 32 . instruction [31:0] $end
$var wire 32 / program_new [31:0] $end
$var wire 32 0 program_next [31:0] $end
$var wire 32 1 program_now [31:0] $end
$var wire 32 2 program_pre [31:0] $end
$var wire 32 3 readData1 [31:0] $end
$var wire 32 4 readData2 [31:0] $end
$var wire 1 5 rst_i $end
$var wire 32 6 signExtend [31:0] $end
$var wire 32 7 signExtend_shifted [31:0] $end
$var wire 5 8 writeRegMux [4:0] $end
$var wire 1 9 zero $end
$scope module PC $end
$var wire 1 - clk_i $end
$var wire 32 : pc_in_i [31:0] $end
$var wire 1 5 rst_i $end
$var reg 32 ; pc_out_o [31:0] $end
$upscope $end
$scope module Adder1 $end
$var wire 32 < src1_i [31:0] $end
$var wire 32 = src2_i [31:0] $end
$var wire 32 > sum_o [31:0] $end
$upscope $end
$scope module IM $end
$var wire 32 ? pc_addr_i [31:0] $end
$var integer 32 @ i [31:0] $end
$var reg 32 A instr_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 B data0_i [4:0] $end
$var wire 5 C data1_i [4:0] $end
$var wire 5 D data_o [4:0] $end
$var wire 1 + select_i $end
$upscope $end
$scope module RF $end
$var wire 5 E RDaddr_i [4:0] $end
$var wire 32 F RDdata_i [31:0] $end
$var wire 5 G RSaddr_i [4:0] $end
$var wire 32 H RSdata_o [31:0] $end
$var wire 5 I RTaddr_i [4:0] $end
$var wire 32 J RTdata_o [31:0] $end
$var wire 1 , RegWrite_i $end
$var wire 1 - clk_i $end
$var wire 1 5 rst_i $end
$upscope $end
$scope module Decoder $end
$var wire 1 ' ALUSrc_o $end
$var wire 3 K ALU_op_o [2:0] $end
$var wire 1 + RegDst_o $end
$var wire 1 , RegWrite_o $end
$var wire 6 L instr_op_i [5:0] $end
$upscope $end
$scope module AC $end
$var wire 4 M ALUCtrl_o [3:0] $end
$var wire 3 N ALUOp_i [2:0] $end
$var wire 6 O funct_i [5:0] $end
$upscope $end
$scope module SE $end
$var wire 16 P data_i [15:0] $end
$var reg 32 Q data_o [31:0] $end
$upscope $end
$scope module Mux_ALUSrc $end
$var wire 32 R data0_i [31:0] $end
$var wire 32 S data1_i [31:0] $end
$var wire 32 T data_o [31:0] $end
$var wire 1 ' select_i $end
$upscope $end
$scope module ALU $end
$var wire 4 U ctrl_i [3:0] $end
$var wire 32 V result_o [31:0] $end
$var wire 5 W shamt_i [4:0] $end
$var wire 32 X src1_i [31:0] $end
$var wire 32 Y src2_i [31:0] $end
$var wire 1 9 zero_o $end
$upscope $end
$scope module Adder2 $end
$var wire 32 Z src1_i [31:0] $end
$var wire 32 [ src2_i [31:0] $end
$var wire 32 \ sum_o [31:0] $end
$upscope $end
$scope module Shifter $end
$var wire 32 ] data_i [31:0] $end
$var wire 32 ^ data_o [31:0] $end
$upscope $end
$scope module Mux_PC_Source $end
$var wire 32 _ data0_i [31:0] $end
$var wire 32 ` data1_i [31:0] $end
$var wire 32 a data_o [31:0] $end
$var wire 1 9 select_i $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx a
bx `
bx _
bx00 ^
bx ]
bx \
bx00 [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
b100000 @
bx ?
bx >
b100 =
bx <
bx ;
bx :
x9
bx 8
bx00 7
bx 6
05
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
0-
x,
x+
bx *
bx )
bx (
x'
bx &
b10 %
b11001 $
b0 #
0"
0!
$end
#5
b1101 *
b1101 F
b1101 V
b100 2
b100 :
b100 a
09
1'
b1101 (
b1101 T
b1101 Y
b111000 /
b111000 \
b111000 `
b110100 7
b110100 [
b110100 ^
b1 &
b1 M
b1 U
1,
b1101 Q
b1101 6
b1101 S
b1101 ]
b1 )
b1 K
b1 N
0+
b1 8
b1 D
b1 E
b0 W
b1101 P
b1101 O
b1000 L
b1 I
b0 4
b0 J
b0 R
b0 G
b0 3
b0 H
b0 X
b0 C
b1 B
b100000000000010000000000001101 A
b100000000000010000000000001101 .
b0 ;
b100 0
b100 >
b100 Z
b100 _
b0 1
b0 <
b0 ?
b1 #
1!
1-
#10
b1101 4
b1101 J
b1101 R
0!
0-
1"
15
#15
b111 *
b111 F
b111 V
b111 (
b111 T
b111 Y
b11100 7
b11100 [
b11100 ^
b111 Q
b111 6
b111 S
b111 ]
b10 8
b10 D
b10 E
b111 P
b111 O
b10 I
b0 4
b0 J
b0 R
b10 B
b1000 2
b1000 :
b1000 a
b100000000000100000000000000111 A
b100000000000100000000000000111 .
b100 ;
b100100 /
b100100 \
b100100 `
b1000 0
b1000 >
b1000 Z
b1000 _
b100 1
b100 <
b100 ?
b10 #
1!
1-
#20
0!
0-
#25
b101 &
b101 M
b101 U
b11111111111111111111111111111111 (
b11111111111111111111111111111111 T
b11111111111111111111111111111111 Y
b11111111111111111111111111111100 7
b11111111111111111111111111111100 [
b11111111111111111111111111111100 ^
b10 )
b10 K
b10 N
b1 *
b1 F
b1 V
b11111111111111111111111111111111 Q
b11111111111111111111111111111111 6
b11111111111111111111111111111111 S
b11111111111111111111111111111111 ]
b11 8
b11 D
b11 E
b11111 W
b1111111111111111 P
b111111 O
b1011 L
b11 I
b1 G
b1101 3
b1101 H
b1101 X
b11111 C
b11 B
b1100 2
b1100 :
b1100 a
b101100001000111111111111111111 A
b101100001000111111111111111111 .
b0 4
b0 J
b0 R
b1000 ;
b1000 /
b1000 \
b1000 `
b1100 0
b1100 >
b1100 Z
b1100 _
b1000 1
b1000 <
b1000 ?
b11 #
1!
1-
#30
0!
0-
#35
b0 *
b0 F
b0 V
b1000 &
b1000 M
b1000 U
b11 )
b11 K
b11 N
0'
b0 (
b0 T
b0 Y
b100 7
b100 [
b100 ^
0,
b1 Q
b1 6
b1 S
b1 ]
b0 8
b0 D
b0 E
b0 W
b1 P
b1 O
b100 L
b0 I
b11 G
b1 3
b1 H
b1 X
b0 C
b0 B
b10000 2
b10000 :
b10000 a
b10000011000000000000000000001 A
b10000011000000000000000000001 .
b0 4
b0 J
b0 R
b1100 ;
b10100 /
b10100 \
b10100 `
b10000 0
b10000 >
b10000 Z
b10000 _
b1100 1
b1100 <
b1100 ?
b100 #
1!
1-
#40
0!
0-
#45
b1 *
b1 F
b1 V
b101 &
b101 M
b101 U
b1000000010101000 7
b1000000010101000 [
b1000000010101000 ^
1,
b10000000101010 Q
b10000000101010 6
b10000000101010 S
b10000000101010 ]
b0 )
b0 K
b0 N
1+
b1101 (
b1101 T
b1101 Y
b100 8
b100 D
b100 E
b10000000101010 P
b101010 O
b0 L
b1 I
b1101 4
b1101 J
b1101 R
b10 G
b111 3
b111 H
b111 X
b100 C
b1 B
b10100 2
b10100 :
b10100 a
b10000010010000000101010 A
b10000010010000000101010 .
b10000 ;
b1000000010111100 /
b1000000010111100 \
b1000000010111100 `
b10100 0
b10100 >
b10100 Z
b10100 _
b10000 1
b10000 <
b10000 ?
b101 #
1!
1-
#50
0!
0-
#55
b11 &
b11 M
b11 U
b1010000010010000 7
b1010000010010000 [
b1010000010010000 ^
b10100000100100 Q
b10100000100100 6
b10100000100100 S
b10100000100100 ]
b1 (
b1 T
b1 Y
b101 8
b101 D
b101 E
b10100000100100 P
b100100 O
b100 I
b1 4
b1 J
b1 R
b1 G
b1101 3
b1101 H
b1101 X
b101 C
b100 B
b11000 2
b11000 :
b11000 a
b1001000010100000100100 A
b1001000010100000100100 .
b10100 ;
b1010000010101000 /
b1010000010101000 \
b1010000010101000 `
b11000 0
b11000 >
b11000 Z
b11000 _
b10100 1
b10100 <
b10100 ?
b110 #
1!
1-
#60
0!
0-
#65
b1100 *
b1100 F
b1100 V
b1000000010001100 7
b1000000010001100 [
b1000000010001100 ^
b10 &
b10 M
b10 U
b10000000100011 Q
b10000000100011 6
b10000000100011 S
b10000000100011 ]
b100 8
b100 D
b100 E
b10000000100011 P
b100011 O
b101 I
b100 C
b101 B
b11100 2
b11100 :
b11100 a
b1001010010000000100011 A
b1001010010000000100011 .
b11000 ;
b1000000010101000 /
b1000000010101000 \
b1000000010101000 `
b11100 0
b11100 >
b11100 Z
b11100 _
b11000 1
b11000 <
b11000 ?
b111 #
1!
1-
#70
0!
0-
#75
b0 *
b0 F
b0 V
b0 7
b0 [
b0 ^
b0 &
b0 M
b0 U
b0 Q
b0 6
b0 S
b0 ]
b0 (
b0 T
b0 Y
b0 8
b0 D
b0 E
b0 P
b0 O
b0 I
b0 4
b0 J
b0 R
b0 G
b0 3
b0 H
b0 X
b0 C
b0 B
b100000 2
b100000 :
b100000 a
b0 A
b0 .
b11100 ;
b100000 /
b100000 \
b100000 `
b100000 0
b100000 >
b100000 Z
b100000 _
b11100 1
b11100 <
b11100 ?
b1000 #
1!
1-
#80
0!
0-
#85
b100100 2
b100100 :
b100100 a
b100000 ;
b100100 /
b100100 \
b100100 `
b100100 0
b100100 >
b100100 Z
b100100 _
b100000 1
b100000 <
b100000 ?
b1001 #
1!
1-
#90
0!
0-
#95
b101000 2
b101000 :
b101000 a
b100100 ;
b101000 /
b101000 \
b101000 `
b101000 0
b101000 >
b101000 Z
b101000 _
b100100 1
b100100 <
b100100 ?
b1010 #
1!
1-
#100
0!
0-
#105
b101100 2
b101100 :
b101100 a
b101000 ;
b101100 /
b101100 \
b101100 `
b101100 0
b101100 >
b101100 Z
b101100 _
b101000 1
b101000 <
b101000 ?
b1011 #
1!
1-
#110
0!
0-
#115
b110000 2
b110000 :
b110000 a
b101100 ;
b110000 /
b110000 \
b110000 `
b110000 0
b110000 >
b110000 Z
b110000 _
b101100 1
b101100 <
b101100 ?
b1100 #
1!
1-
#120
0!
0-
#125
b110100 2
b110100 :
b110100 a
b110000 ;
b110100 /
b110100 \
b110100 `
b110100 0
b110100 >
b110100 Z
b110100 _
b110000 1
b110000 <
b110000 ?
b1101 #
1!
1-
#130
0!
0-
#135
b111000 2
b111000 :
b111000 a
b110100 ;
b111000 /
b111000 \
b111000 `
b111000 0
b111000 >
b111000 Z
b111000 _
b110100 1
b110100 <
b110100 ?
b1110 #
1!
1-
#140
0!
0-
#145
b111100 2
b111100 :
b111100 a
b111000 ;
b111100 /
b111100 \
b111100 `
b111100 0
b111100 >
b111100 Z
b111100 _
b111000 1
b111000 <
b111000 ?
b1111 #
1!
1-
#150
0!
0-
#155
b1000000 2
b1000000 :
b1000000 a
b111100 ;
b1000000 /
b1000000 \
b1000000 `
b1000000 0
b1000000 >
b1000000 Z
b1000000 _
b111100 1
b111100 <
b111100 ?
b10000 #
1!
1-
#160
0!
0-
#165
b1000100 2
b1000100 :
b1000100 a
b1000000 ;
b1000100 /
b1000100 \
b1000100 `
b1000100 0
b1000100 >
b1000100 Z
b1000100 _
b1000000 1
b1000000 <
b1000000 ?
b10001 #
1!
1-
#170
0!
0-
#175
b1001000 2
b1001000 :
b1001000 a
b1000100 ;
b1001000 /
b1001000 \
b1001000 `
b1001000 0
b1001000 >
b1001000 Z
b1001000 _
b1000100 1
b1000100 <
b1000100 ?
b10010 #
1!
1-
#180
0!
0-
#185
b1001100 2
b1001100 :
b1001100 a
b1001000 ;
b1001100 /
b1001100 \
b1001100 `
b1001100 0
b1001100 >
b1001100 Z
b1001100 _
b1001000 1
b1001000 <
b1001000 ?
b10011 #
1!
1-
#190
0!
0-
#195
b1010000 2
b1010000 :
b1010000 a
b1001100 ;
b1010000 /
b1010000 \
b1010000 `
b1010000 0
b1010000 >
b1010000 Z
b1010000 _
b1001100 1
b1001100 <
b1001100 ?
b10100 #
1!
1-
#200
0!
0-
#205
b1010100 2
b1010100 :
b1010100 a
b1010000 ;
b1010100 /
b1010100 \
b1010100 `
b1010100 0
b1010100 >
b1010100 Z
b1010100 _
b1010000 1
b1010000 <
b1010000 ?
b10101 #
1!
1-
#210
0!
0-
#215
b1011000 2
b1011000 :
b1011000 a
b1010100 ;
b1011000 /
b1011000 \
b1011000 `
b1011000 0
b1011000 >
b1011000 Z
b1011000 _
b1010100 1
b1010100 <
b1010100 ?
b10110 #
1!
1-
#220
0!
0-
#225
b1011100 2
b1011100 :
b1011100 a
b1011000 ;
b1011100 /
b1011100 \
b1011100 `
b1011100 0
b1011100 >
b1011100 Z
b1011100 _
b1011000 1
b1011000 <
b1011000 ?
b10111 #
1!
1-
#230
0!
0-
#235
b1100000 2
b1100000 :
b1100000 a
b1011100 ;
b1100000 /
b1100000 \
b1100000 `
b1100000 0
b1100000 >
b1100000 Z
b1100000 _
b1011100 1
b1011100 <
b1011100 ?
b11000 #
1!
1-
#240
0!
0-
#245
b1100100 2
b1100100 :
b1100100 a
b1100000 ;
b1100100 /
b1100100 \
b1100100 `
b1100100 0
b1100100 >
b1100100 Z
b1100100 _
b1100000 1
b1100000 <
b1100000 ?
b11001 #
1!
1-
#250
0!
0-
#255
b1101000 2
b1101000 :
b1101000 a
b1100100 ;
b1101000 /
b1101000 \
b1101000 `
b1101000 0
b1101000 >
b1101000 Z
b1101000 _
b1100100 1
b1100100 <
b1100100 ?
b11010 #
1!
1-
#260
0!
0-
